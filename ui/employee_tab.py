"""
Tab qu·∫£n l√Ω nh√¢n vi√™n - C√≥ ch·ª©c nƒÉng Th√™m/S·ª≠a/X√≥a
"""

import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from PIL import Image

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services import db
from services.face import face_encode_from_image

class EmployeeTab(ttk.Frame):
    """Tab qu·∫£n l√Ω nh√¢n vi√™n"""
    def __init__(self, master):
        super().__init__(master)

        # ===== TR·∫†NG TH√ÅI =====
        self._edit_mode = False  # False = Th√™m m·ªõi, True = S·ª≠a
        self._edit_emp_id = None  # ID nh√¢n vi√™n ƒëang s·ª≠a

        # ===== Layout ch√≠nh: 2 c·ªôt =====
        self.columnconfigure(0, weight=3)  # List
        self.columnconfigure(1, weight=1)  # Form
        self.rowconfigure(0, weight=1)

        # ===== Panel danh s√°ch (B√™n tr√°i) =====
        list_frame = ttk.LabelFrame(self, text="üìã Danh s√°ch nh√¢n vi√™n", padding=10)
        list_frame.grid(row=0, column=0, sticky="nsew", padx=(10, 5), pady=10)
        list_frame.columnconfigure(0, weight=1)
        list_frame.rowconfigure(0, weight=1)

        # Treeview
        cols = ("id", "code", "name", "dept", "phone")
        self.tree = ttk.Treeview(
            list_frame,
            columns=cols,
            show="headings",
            height=25,
        )
        
        self.tree.heading("id", text="ID")
        self.tree.heading("code", text="M√£ NV")
        self.tree.heading("name", text="H·ªç t√™n")
        self.tree.heading("dept", text="Ph√≤ng ban")
        self.tree.heading("phone", text="SƒêT")
        
        self.tree.column("id", width=60, anchor="center")
        self.tree.column("code", width=100)
        self.tree.column("name", width=200)
        self.tree.column("dept", width=150)
        self.tree.column("phone", width=120)
        
        self.tree.grid(row=0, column=0, sticky="nsew")

        # Scrollbar
        scrollbar = ttk.Scrollbar(list_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.grid(row=0, column=1, sticky="ns")

        # Buttons
        btn_frame = ttk.Frame(list_frame)
        btn_frame.grid(row=1, column=0, columnspan=2, sticky="ew", pady=(10, 0))
        
        ttk.Button(
            btn_frame, 
            text="üîÑ T·∫£i l·∫°i", 
            command=self.refresh_employees
        ).pack(side="left", padx=4)
        
        ttk.Button(
            btn_frame, 
            text="‚úèÔ∏è S·ª≠a nh√¢n vi√™n ƒë√£ ch·ªçn", 
            command=self.edit_selected_employee
        ).pack(side="left", padx=4)
        
        ttk.Button(
            btn_frame, 
            text="üóëÔ∏è X√≥a nh√¢n vi√™n ƒë√£ ch·ªçn", 
            command=self.delete_selected_employee
        ).pack(side="left", padx=4)

        # ===== Panel form (B√™n ph·∫£i) =====
        self.form_frame = ttk.LabelFrame(self, text="‚ûï Th√™m nh√¢n vi√™n m·ªõi", padding=15)
        self.form_frame.grid(row=0, column=1, sticky="nsew", padx=(5, 10), pady=10)

        self.emp_code_var = tk.StringVar()
        self.emp_name_var = tk.StringVar()
        self.emp_dept_var = tk.StringVar()
        self.phone_var = tk.StringVar()
        self.face_path_var = tk.StringVar()

        # Form fields
        row = 0
        
        ttk.Label(self.form_frame, text="M√£ nh√¢n vi√™n: *").grid(
            row=row, column=0, sticky="w", pady=6
        )
        self.emp_code_entry = ttk.Entry(
            self.form_frame, 
            textvariable=self.emp_code_var, 
            width=28
        )
        self.emp_code_entry.grid(row=row, column=1, columnspan=2, sticky="ew", pady=6)
        row += 1

        ttk.Label(self.form_frame, text="H·ªç v√† t√™n: *").grid(
            row=row, column=0, sticky="w", pady=6
        )
        ttk.Entry(self.form_frame, textvariable=self.emp_name_var, width=28).grid(
            row=row, column=1, columnspan=2, sticky="ew", pady=6
        )
        row += 1

        ttk.Label(self.form_frame, text="Ph√≤ng ban:").grid(
            row=row, column=0, sticky="w", pady=6
        )
        ttk.Entry(self.form_frame, textvariable=self.emp_dept_var, width=28).grid(
            row=row, column=1, columnspan=2, sticky="ew", pady=6
        )
        row += 1

        ttk.Label(self.form_frame, text="S·ªë ƒëi·ªán tho·∫°i:").grid(
            row=row, column=0, sticky="w", pady=6
        )
        ttk.Entry(self.form_frame, textvariable=self.phone_var, width=28).grid(
            row=row, column=1, columnspan=2, sticky="ew", pady=6
        )
        row += 1

        ttk.Label(self.form_frame, text="·∫¢nh khu√¥n m·∫∑t: *").grid(
            row=row, column=0, sticky="w", pady=6
        )
        ttk.Entry(
            self.form_frame, 
            textvariable=self.face_path_var, 
            width=20,
            state="readonly"
        ).grid(row=row, column=1, sticky="ew", pady=6)
        
        ttk.Button(
            self.form_frame, 
            text="üìÅ", 
            command=self.browse_face_image,
            width=3
        ).grid(row=row, column=2, padx=(5, 0), pady=6)
        row += 1

        # Note
        self.note_label = ttk.Label(
            self.form_frame,
            text="* B·∫Øt bu·ªôc khi th√™m m·ªõi\n\nL∆∞u √Ω: ·∫¢nh khu√¥n m·∫∑t c·∫ßn:\n"
                 "- R√µ n√©t, nh√¨n th·∫≥ng\n"
                 "- √Ånh s√°ng t·ªët\n"
                 "- Ch·ªâ 1 ng∆∞·ªùi trong ·∫£nh",
            foreground="#64748b",
            font=("Segoe UI", 9)
        )
        self.note_label.grid(row=row, column=0, columnspan=3, sticky="w", pady=(10, 10))
        row += 1

        # Save button
        self.save_button = ttk.Button(
            self.form_frame, 
            text="üíæ L∆∞u nh√¢n vi√™n", 
            command=self.save_employee
        )
        self.save_button.grid(row=row, column=0, columnspan=3, pady=(5, 0), sticky="ew")
        row += 1

        # Cancel button (ch·ªâ hi·ªán khi ƒëang s·ª≠a)
        self.cancel_button = ttk.Button(
            self.form_frame,
            text="‚ùå H·ªßy",
            command=self.cancel_edit
        )
        # Kh√¥ng grid ngay, ch·ªâ hi·ªán khi edit

        self.form_frame.columnconfigure(1, weight=1)

        # Load data l·∫ßn ƒë·∫ßu
        self.after(100, self.refresh_employees)

    def refresh_employees(self):
        """T·∫£i l·∫°i danh s√°ch nh√¢n vi√™n"""
        for i in self.tree.get_children():
            self.tree.delete(i)
        
        try:
            df = db.get_all_employees()
            if df.empty:
                return
            
            for _, row in df.iterrows():
                self.tree.insert(
                    "",
                    "end",
                    values=(
                        int(row["id"]),
                        row["emp_code"],
                        row["name"],
                        row.get("department", ""),
                        row.get("phone", ""),
                    ),
                )
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n: {e}")

    def browse_face_image(self):
        """Ch·ªçn file ·∫£nh khu√¥n m·∫∑t"""
        fpath = filedialog.askopenfilename(
            title="Ch·ªçn ·∫£nh khu√¥n m·∫∑t",
            filetypes=[
                ("Image files", "*.jpg *.jpeg *.png"),
                ("All files", "*.*")
            ]
        )
        if fpath:
            self.face_path_var.set(fpath)

    def edit_selected_employee(self):
        """Chuy·ªÉn sang ch·∫ø ƒë·ªô s·ª≠a nh√¢n vi√™n ƒë√£ ch·ªçn"""
        sel = self.tree.selection()
        if not sel:
            messagebox.showwarning(
                "Ch∆∞a ch·ªçn", 
                "Vui l√≤ng ch·ªçn nh√¢n vi√™n c·∫ßn s·ª≠a."
            )
            return
        
        vals = self.tree.item(sel[0], "values")
        emp_id = int(vals[0])
        
        # L·∫•y th√¥ng tin chi ti·∫øt
        try:
            emp = db.get_employee_by_id(emp_id)
            if not emp:
                messagebox.showerror("L·ªói", "Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n.")
                return
            
            # Chuy·ªÉn sang ch·∫ø ƒë·ªô s·ª≠a
            self._edit_mode = True
            self._edit_emp_id = emp_id
            
            # ƒê·ªïi title form
            self.form_frame.config(text=f"‚úèÔ∏è S·ª≠a nh√¢n vi√™n: {emp['emp_code']}")
            
            # ƒêi·ªÅn th√¥ng tin v√†o form
            self.emp_code_var.set(emp['emp_code'])
            self.emp_name_var.set(emp['name'])
            self.emp_dept_var.set(emp.get('department', ''))
            self.phone_var.set(emp.get('phone', ''))
            self.face_path_var.set("")  # ƒê·ªÉ tr·ªëng, n·∫øu kh√¥ng ch·ªçn ·∫£nh m·ªõi = gi·ªØ nguy√™n
            
            # Disable m√£ NV (kh√¥ng cho s·ª≠a)
            self.emp_code_entry.config(state="disabled")
            
            # Thay ƒë·ªïi note
            self.note_label.config(
                text="üìù Ch·∫ø ƒë·ªô S·ª¨A:\n\n"
                     "‚Ä¢ M√£ NV kh√¥ng th·ªÉ thay ƒë·ªïi\n"
                     "‚Ä¢ N·∫øu kh√¥ng ch·ªçn ·∫£nh m·ªõi,\n"
                     "  h·ªá th·ªëng s·∫Ω gi·ªØ nguy√™n ·∫£nh c≈©\n"
                     "‚Ä¢ C√°c tr∆∞·ªùng kh√°c c√≥ th·ªÉ s·ª≠a"
            )
            
            # ƒê·ªïi text n√∫t
            self.save_button.config(text="üíæ C·∫≠p nh·∫≠t")
            
            # Hi·ªán n√∫t H·ªßy
            self.cancel_button.grid(row=7, column=0, columnspan=3, pady=(5, 0), sticky="ew")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i th√¥ng tin nh√¢n vi√™n: {e}")

    def cancel_edit(self):
        """H·ªßy ch·∫ø ƒë·ªô s·ª≠a, quay v·ªÅ th√™m m·ªõi"""
        self._edit_mode = False
        self._edit_emp_id = None
        
        # ƒê·ªïi title
        self.form_frame.config(text="‚ûï Th√™m nh√¢n vi√™n m·ªõi")
        
        # Clear form
        self.emp_code_var.set("")
        self.emp_name_var.set("")
        self.emp_dept_var.set("")
        self.phone_var.set("")
        self.face_path_var.set("")
        
        # Enable l·∫°i m√£ NV
        self.emp_code_entry.config(state="normal")
        
        # ƒê·ªïi note
        self.note_label.config(
            text="* B·∫Øt bu·ªôc khi th√™m m·ªõi\n\nL∆∞u √Ω: ·∫¢nh khu√¥n m·∫∑t c·∫ßn:\n"
                 "- R√µ n√©t, nh√¨n th·∫≥ng\n"
                 "- √Ånh s√°ng t·ªët\n"
                 "- Ch·ªâ 1 ng∆∞·ªùi trong ·∫£nh"
        )
        
        # ƒê·ªïi text n√∫t
        self.save_button.config(text="üíæ L∆∞u nh√¢n vi√™n")
        
        # ·∫®n n√∫t H·ªßy
        self.cancel_button.grid_forget()

    def save_employee(self):
        """L∆∞u nh√¢n vi√™n (Th√™m m·ªõi ho·∫∑c C·∫≠p nh·∫≠t)"""
        if self._edit_mode:
            self._update_employee()
        else:
            self._add_new_employee()

    def _add_new_employee(self):
        """Th√™m nh√¢n vi√™n m·ªõi"""
        code = self.emp_code_var.get().strip()
        name = self.emp_name_var.get().strip()
        dept = self.emp_dept_var.get().strip()
        phone = self.phone_var.get().strip()
        fpath = self.face_path_var.get().strip()

        if not code or not name or not fpath:
            messagebox.showwarning(
                "Thi·∫øu th√¥ng tin", 
                "Vui l√≤ng nh·∫≠p ƒë·ªß:\n- M√£ nh√¢n vi√™n\n- H·ªç t√™n\n- ·∫¢nh khu√¥n m·∫∑t"
            )
            return

        try:
            # Load v√† encode ·∫£nh
            img = Image.open(fpath).convert("RGB")
            enc = face_encode_from_image(img)
            
            if enc is None:
                messagebox.showerror(
                    "L·ªói nh·∫≠n di·ªán", 
                    "Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c khu√¥n m·∫∑t trong ·∫£nh.\n\n"
                    "Vui l√≤ng ch·ªçn ·∫£nh kh√°c v·ªõi:\n"
                    "- Khu√¥n m·∫∑t r√µ r√†ng\n"
                    "- √Ånh s√°ng t·ªët\n"
                    "- Ch·ªâ 1 ng∆∞·ªùi"
                )
                return

            # L∆∞u v√†o database
            ok, msg = db.add_employee(code, name, dept, phone, enc)

            if ok:
                messagebox.showinfo("Th√†nh c√¥ng", msg)
                self.refresh_employees()
                # Clear form
                self.emp_code_var.set("")
                self.emp_name_var.set("")
                self.emp_dept_var.set("")
                self.phone_var.set("")
                self.face_path_var.set("")
            else:
                messagebox.showerror("L·ªói", msg)
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói x·ª≠ l√Ω: {e}")

    def _update_employee(self):
        """C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n"""
        name = self.emp_name_var.get().strip()
        dept = self.emp_dept_var.get().strip()
        phone = self.phone_var.get().strip()
        fpath = self.face_path_var.get().strip()

        if not name:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p h·ªç t√™n.")
            return

        try:
            # Ki·ªÉm tra c√≥ ch·ªçn ·∫£nh m·ªõi kh√¥ng
            enc = None
            if fpath:
                img = Image.open(fpath).convert("RGB")
                enc = face_encode_from_image(img)
                
                if enc is None:
                    messagebox.showerror(
                        "L·ªói nh·∫≠n di·ªán", 
                        "Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c khu√¥n m·∫∑t trong ·∫£nh m·ªõi.\n\n"
                        "Vui l√≤ng ch·ªçn ·∫£nh kh√°c ho·∫∑c b·ªè tr·ªëng ƒë·ªÉ gi·ªØ ·∫£nh c≈©."
                    )
                    return

            # C·∫≠p nh·∫≠t database
            ok, msg = db.update_employee(self._edit_emp_id, name, dept, phone, enc)

            if ok:
                messagebox.showinfo("Th√†nh c√¥ng", msg)
                self.refresh_employees()
                self.cancel_edit()  # Quay v·ªÅ ch·∫ø ƒë·ªô th√™m m·ªõi
            else:
                messagebox.showerror("L·ªói", msg)
                
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói x·ª≠ l√Ω: {e}")

    def delete_selected_employee(self):
        """X√≥a nh√¢n vi√™n ƒë√£ ch·ªçn"""
        sel = self.tree.selection()
        if not sel:
            messagebox.showwarning(
                "Ch∆∞a ch·ªçn", 
                "Vui l√≤ng ch·ªçn nh√¢n vi√™n c·∫ßn x√≥a."
            )
            return
        
        vals = self.tree.item(sel[0], "values")
        emp_id = int(vals[0])
        emp_name = vals[2]
        
        if messagebox.askyesno(
            "X√°c nh·∫≠n x√≥a", 
            f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a nh√¢n vi√™n:\n\n"
            f"ID: {emp_id}\n"
            f"T√™n: {emp_name}\n\n"
            f"‚ö†Ô∏è Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c!"
        ):
            try:
                db.delete_employee(emp_id)
                messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a nh√¢n vi√™n.")
                self.refresh_employees()
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ x√≥a: {e}")